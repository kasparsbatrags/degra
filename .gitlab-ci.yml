stages:
  - test
  - build
  - deploy-test
  - deploy-prod

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"

services:
  - docker:20-dind

.maven-setup: &maven-setup
  image: maven:3.9.5-eclipse-temurin-21
  cache:
    paths:
      - .m2/repository

qodana:
  stage: test
  image:
    name: jetbrains/qodana-jvm
    entrypoint: [""]
  variables:
    QODANA_TOKEN: $qodana_token
  script:
    - qodana --save-report --results-dir=$CI_PROJECT_DIR/.qodana
  only:
    - master
    - main
    - merge_requests
  when: manual

usermanager-test:
  <<: *maven-setup
  stage: test
  script:
    - mvn clean test -pl usermanager -am
  artifacts:
    reports:
      junit: usermanager/target/surefire-reports/TEST-*.xml

core-test:
  <<: *maven-setup
  stage: test
  script:
    - mvn clean test -pl core -am
  artifacts:
    reports:
      junit: core/target/surefire-reports/TEST-*.xml

company-test:
  <<: *maven-setup
  stage: test
  script:
    - mvn clean test -pl company -am
  artifacts:
    reports:
      junit: company/target/surefire-reports/TEST-*.xml

freighttracking-test:
  <<: *maven-setup
  stage: test
  script:
    - mvn clean test -pl freighttracking -am
  artifacts:
    reports:
      junit: freighttracking/target/surefire-reports/TEST-*.xml

sonarcloud-check:
  stage: test
  image: maven:3.9.5-eclipse-temurin-21
  script:
    - mvn verify sonar:sonar -Dsonar.projectKey=kaspars.batrags_degra -Djavafx.version=17
  only:
    - merge_requests
    - master
    - main
    - develop
  when: manual

core-build:
  <<: *maven-setup
  stage: build
  script:
    - mvn clean install -pl core -am -DskipTests -Dsonar.skip=true
  artifacts:
    paths:
      - core/target/*.jar
  only:
    - branches
    - test
    - master
  needs:
    - core-test

usermanager-maven-build:
  <<: *maven-setup
  stage: build
  script:
    - mvn clean package -pl usermanager -am -DskipTests
  artifacts:
    paths:
      - usermanager/target/*.jar
      - core/target/*.jar
  dependencies:
    - core-build
  needs:
    - usermanager-test
    - core-build
  only:
    - test
    - master

usermanager-docker-build:
  stage: build
  image: docker:20
  needs:
    - usermanager-maven-build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/usermanager:$CI_COMMIT_REF_SLUG -f usermanager/Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/usermanager:$CI_COMMIT_REF_SLUG
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "test" ]]; then
        docker tag $CI_REGISTRY_IMAGE/usermanager:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE/usermanager:test
        docker push $CI_REGISTRY_IMAGE/usermanager:test
      fi
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "master" ]]; then
        docker tag $CI_REGISTRY_IMAGE/usermanager:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE/usermanager:latest
        docker push $CI_REGISTRY_IMAGE/usermanager:latest
      fi
  only:
    - test
    - master

company-maven-build:
  <<: *maven-setup
  stage: build
  script:
    - mvn clean package -pl company -am -DskipTests
  artifacts:
    paths:
      - company/target/*.jar
      - core/target/*.jar
  dependencies:
    - company-test
    - core-build
  needs:
    - company-test
    - core-build
  only:
    - test
    - master

freighttracking-maven-build:
  <<: *maven-setup
  stage: build
  script:
    - mvn clean package -pl freighttracking -am -DskipTests
  artifacts:
    paths:
      - freighttracking/target/*.jar
      - core/target/*.jar
  dependencies:
    - freighttracking-test
    - core-build
  needs:
    - freighttracking-test
    - core-build
  only:
    - test
    - master

company-docker-build:
  stage: build
  image: docker:20
  needs:
    - company-maven-build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/company:$CI_COMMIT_REF_SLUG -f company/Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/company:$CI_COMMIT_REF_SLUG
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "test" ]]; then
        docker tag $CI_REGISTRY_IMAGE/company:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE/company:test
        docker push $CI_REGISTRY_IMAGE/company:test
      fi
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "master" ]]; then
        docker tag $CI_REGISTRY_IMAGE/company:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE/company:latest
        docker push $CI_REGISTRY_IMAGE/company:latest
      fi
  only:
    - test
    - master

freighttracking-docker-build:
  stage: build
  image: docker:20
  needs:
    - freighttracking-maven-build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/freighttracking:$CI_COMMIT_REF_SLUG -f freighttracking/Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/freighttracking:$CI_COMMIT_REF_SLUG
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "test" ]]; then
        docker tag $CI_REGISTRY_IMAGE/freighttracking:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE/freighttracking:test
        docker push $CI_REGISTRY_IMAGE/freighttracking:test
      fi
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "master" ]]; then
        docker tag $CI_REGISTRY_IMAGE/freighttracking:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE/freighttracking:latest
        docker push $CI_REGISTRY_IMAGE/freighttracking:latest
      fi
  only:
    - test
    - master

freight-web-build:
  stage: build
  image: node:20
  cache:
    key: ${CI_COMMIT_REF_SLUG}-freight-node-modules
    paths:
      - native/freight/node_modules/
  script:
    - cd native/freight
    - npm ci --legacy-peer-deps
    # Skip the "npm run web" command as it starts a server that waits for connections
    - npx expo export --platform web --output-dir web-build
  artifacts:
    paths:
      - native/freight/web-build/
  only:
    - test
    - master

freight-web-docker-build:
  stage: build
  image: docker:20
  needs:
    - freight-web-build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/freight-web:$CI_COMMIT_REF_SLUG -f native/freight/Dockerfile native/freight
    - docker push $CI_REGISTRY_IMAGE/freight-web:$CI_COMMIT_REF_SLUG
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "test" ]]; then
        docker tag $CI_REGISTRY_IMAGE/freight-web:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE/freight-web:test
        docker push $CI_REGISTRY_IMAGE/freight-web:test
      fi
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "master" ]]; then
        docker tag $CI_REGISTRY_IMAGE/freight-web:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE/freight-web:latest
        docker push $CI_REGISTRY_IMAGE/freight-web:latest
      fi
  only:
    - test
    - master

.deploy-template: &deploy-template
  image: docker:20

  script:
    - |
      echo "Debugging all environment variables:" &&
      env | sort &&
      if [ "$CI_COMMIT_REF_NAME" = "test" ]; then
      export ENVIRONMENT="test"
      export SERVER="$TEST_SERVER"
      export SERVER_USER="$TEST_SERVER_USER"
      echo "Using TEST environment variables"
      elif [ "$CI_COMMIT_REF_NAME" = "master" ]; then
      export ENVIRONMENT="production"
      export SERVER="$PRODUCTION_SERVER"
      export SERVER_USER="$PRODUCTION_SERVER_USER"
      echo "Using PROD environment variables"
      else
      echo "Unknown branch: $CI_COMMIT_REF_NAME"
      exit 1
      fi &&
      echo "ENVIRONMENT=$ENVIRONMENT" &&
      echo "SERVER=$SERVER" &&
      echo "SERVER_USER=$SERVER_USER" &&
      if [ -z "$SERVER" ] || [ -z "$SERVER_USER" ]; then
      echo "ERROR: SERVER or SERVER_USER variables are not set correctly!"
      exit 1
      fi

    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$TEST_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa

    - |
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $SERVER_USER@$SERVER "
        docker network inspect ${ENVIRONMENT}-network >/dev/null 2>&1 || docker network create ${ENVIRONMENT}-network
      "

    - |
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $SERVER_USER@$SERVER << EOF
        mkdir -p /home/dockeruser/degra/$ENVIRONMENT/$SERVICE_NAME &&
        cd /home/dockeruser/degra/$ENVIRONMENT/$SERVICE_NAME &&
        echo "$ENV_CONTENT" > .env
      EOF
    - |
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $SERVER_USER@$SERVER "
        cd /home/dockeruser/degra/$ENVIRONMENT/$SERVICE_NAME &&
        cat > docker-compose.yml << 'EOL'
        services:
          $SERVICE_NAME:
            container_name: ${ENVIRONMENT}-$SERVICE_NAME
            image: $CI_REGISTRY_IMAGE/$SERVICE_NAME:$CI_COMMIT_REF_SLUG
            environment:
              - SPRING_DATASOURCE_URL=\${SPRING_DATASOURCE_URL}
              - SPRING_DATASOURCE_USERNAME=\${POSTGRES_USER}
              - SPRING_DATASOURCE_PASSWORD=\${POSTGRES_PASSWORD}
              - SPRING_JPA_HIBERNATE_DDL_AUTO=update
              - KEYCLOAK_AUTH_SERVER_URL=\${KEYCLOAK_AUTH_SERVER_URL}
              - KEYCLOAK_REALM=\${KEYCLOAK_REALM}
              - KEYCLOAK_RESOURCE=\${KEYCLOAK_RESOURCE}
              - KEYCLOAK_CREDENTIALS_SECRET=\${KEYCLOAK_CLIENT_SECRET}
              - KEYCLOAK_USE_RESOURCE_ROLE_MAPPINGS=true
              - SPRING_PROFILES_ACTIVE=\${SPRING_PROFILES_ACTIVE}
              - APP_SECURITY_ALLOWED_ORIGINS=\${APP_SECURITY_ALLOWED_ORIGINS}
            ports:
              - \"\${APP_PORT}:8080\"
            volumes:
              - ./Logs:/app/Logs:Z
            restart: unless-stopped
            networks:
              - ${ENVIRONMENT}-network
      EOL
      if [ "$CI_COMMIT_REF_NAME" = "test" ]; then
        cat >> docker-compose.yml << 'EOL'
            deploy:
              resources:
                limits:
                  memory: 512m
                  cpus: '0.25'
                reservations:
                  memory: 256m
      EOL
      fi
      cat >> docker-compose.yml << 'EOL'
        networks:
          ${ENVIRONMENT}-network:
            external: true
      EOL
      "
    - |
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $SERVER_USER@$SERVER "
        cd /home/dockeruser/degra/$ENVIRONMENT/$SERVICE_NAME &&
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
        docker-compose pull &&
        docker-compose -p ${ENVIRONMENT}-$SERVICE_NAME down --remove-orphans || true &&
        docker-compose -p ${ENVIRONMENT}-$SERVICE_NAME up -d
      "

.deploy-test-template: &deploy-test-template
  <<: *deploy-template
  stage: deploy-test
  variables:
    ENVIRONMENT: "test"
    SSH_PRIVATE_KEY: $TEST_SSH_PRIVATE_KEY
    IMAGE_TAG: $CI_COMMIT_REF_SLUG
  rules:
    - if: '$CI_COMMIT_BRANCH == "test"'
      when: always
    - if: '$CI_COMMIT_BRANCH != "test" && $CI_COMMIT_BRANCH != "master"'
      when: never

usermanager-deploy-test:
  <<: *deploy-test-template
  needs:
    - job: usermanager-docker-build
      optional: true
  variables:
    SERVICE_NAME: "usermanager"
    ENV_CONTENT: $TEST_ENV_USERMANAGER
  dependencies:
    - usermanager-docker-build
  environment:
    name: test-usermanager
    url: https://test-usermanager.degra.lv

company-deploy-test:
  <<: *deploy-test-template
  needs:
    - job: company-docker-build
      optional: true
  variables:
    SERVICE_NAME: "company"
    ENV_CONTENT: $TEST_ENV_COMPANY
  dependencies:
    - company-docker-build
  environment:
    name: test-company
    url: https://test-company.degra.lv

freighttracking-deploy-test:
  <<: *deploy-test-template
  needs:
    - job: freighttracking-docker-build
      optional: true
  variables:
    SERVICE_NAME: "freighttracking"
    ENV_CONTENT: $TEST_ENV_FREIGHTTRACKING
  dependencies:
    - freighttracking-docker-build
  environment:
    name: test-freighttracking
    url: https://test-freighttracking.degra.lv

.deploy-prod-template: &deploy-prod-template
  <<: *deploy-template
  stage: deploy-prod
  variables:
    ENVIRONMENT: "prod"
    SSH_PRIVATE_KEY: $PRODUCTION_SSH_PRIVATE_KEY
    IMAGE_TAG: "latest"
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: manual

usermanager-deploy-prod:
  <<: *deploy-prod-template
  needs:
    - job: usermanager-docker-build
      optional: true
  variables:
    SERVICE_NAME: "usermanager"
    ENV_CONTENT: $PRODUCTION_ENV_USERMANAGER
  dependencies:
    - usermanager-docker-build
  environment:
    name: production-usermanager
    url: https://usermanager.degra.lv

company-deploy-prod:
  <<: *deploy-prod-template
  needs:
    - job: company-docker-build
      optional: true
  variables:
    SERVICE_NAME: "company"
    ENV_CONTENT: $PRODUCTION_ENV_COMPANY
  dependencies:
    - company-docker-build
  environment:
    name: production-company
    url: https://company.degra.lv

freighttracking-deploy-prod:
  <<: *deploy-prod-template
  needs:
    - job: freighttracking-docker-build
      optional: true
  variables:
    SERVICE_NAME: "freighttracking"
    ENV_CONTENT: $PRODUCTION_ENV_FREIGHTTRACKING
  dependencies:
    - freighttracking-docker-build
  environment:
    name: production-freighttracking
    url: https://freighttracking.degra.lv

# Custom template for web applications
.deploy-web-template: &deploy-web-template
  image: docker:20

  script:
    - |
      echo "Debugging all environment variables:" &&
      env | sort &&
      if [ "$CI_COMMIT_REF_NAME" = "test" ]; then
      export ENVIRONMENT="test"
      export SERVER="$TEST_SERVER"
      export SERVER_USER="$TEST_SERVER_USER"
      echo "Using TEST environment variables"
      elif [ "$CI_COMMIT_REF_NAME" = "master" ]; then
      export ENVIRONMENT="production"
      export SERVER="$PRODUCTION_SERVER"
      export SERVER_USER="$PRODUCTION_SERVER_USER"
      echo "Using PROD environment variables"
      else
      echo "Unknown branch: $CI_COMMIT_REF_NAME"
      exit 1
      fi &&
      echo "ENVIRONMENT=$ENVIRONMENT" &&
      echo "SERVER=$SERVER" &&
      echo "SERVER_USER=$SERVER_USER" &&
      if [ -z "$SERVER" ] || [ -z "$SERVER_USER" ]; then
      echo "ERROR: SERVER or SERVER_USER variables are not set correctly!"
      exit 1
      fi

    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$TEST_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa

    - |
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $SERVER_USER@$SERVER "
        docker network inspect ${ENVIRONMENT}-network >/dev/null 2>&1 || docker network create ${ENVIRONMENT}-network
      "

    - |
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $SERVER_USER@$SERVER << EOF
        mkdir -p /home/dockeruser/degra/$ENVIRONMENT/$SERVICE_NAME &&
        cd /home/dockeruser/degra/$ENVIRONMENT/$SERVICE_NAME &&
        echo "$ENV_CONTENT" > .env
      EOF
    - |
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $SERVER_USER@$SERVER "
        cd /home/dockeruser/degra/$ENVIRONMENT/$SERVICE_NAME &&
        cat > docker-compose.yml << 'EOL'
        services:
          $SERVICE_NAME:
            container_name: ${ENVIRONMENT}-$SERVICE_NAME
            image: $CI_REGISTRY_IMAGE/$SERVICE_NAME:$CI_COMMIT_REF_SLUG
            ports:
              - \"\${APP_PORT}:80\"
            restart: unless-stopped
            networks:
              - ${ENVIRONMENT}-network
            
        networks:
          ${ENVIRONMENT}-network:
            external: true
      EOL
      "
    - |
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $SERVER_USER@$SERVER "
        cd /home/dockeruser/degra/$ENVIRONMENT/$SERVICE_NAME &&
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
        docker-compose pull &&
        docker-compose -p ${ENVIRONMENT}-$SERVICE_NAME down --remove-orphans || true &&
        docker-compose -p ${ENVIRONMENT}-$SERVICE_NAME up -d
      "

.deploy-web-test-template: &deploy-web-test-template
  <<: *deploy-web-template
  stage: deploy-test
  needs:
    - job: freight-web-docker-build
      optional: true
  variables:
    ENVIRONMENT: "test"
    SSH_PRIVATE_KEY: $TEST_SSH_PRIVATE_KEY
    IMAGE_TAG: $CI_COMMIT_REF_SLUG
  rules:
    - if: '$CI_COMMIT_BRANCH == "test"'
      when: always
    - if: '$CI_COMMIT_BRANCH != "test" && $CI_COMMIT_BRANCH != "master"'
      when: never

.deploy-web-prod-template: &deploy-web-prod-template
  <<: *deploy-web-template
  stage: deploy-prod
  variables:
    ENVIRONMENT: "prod"
    SSH_PRIVATE_KEY: $PRODUCTION_SSH_PRIVATE_KEY
    IMAGE_TAG: "latest"
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: manual

freight-web-deploy-test:
  <<: *deploy-web-test-template
  variables:
    SERVICE_NAME: "freight-web"
    ENV_CONTENT: $TEST_ENV_FREIGHT_WEB
  dependencies:
    - freight-web-docker-build
  environment:
    name: test-freight-web
    url: https://test-freight.degra.lv

freight-web-deploy-prod:
  <<: *deploy-web-prod-template
  variables:
    SERVICE_NAME: "freight-web"
    ENV_CONTENT: $PRODUCTION_ENV_FREIGHT_WEB
  dependencies:
    - freight-web-docker-build
  environment:
    name: production-freight-web
    url: https://freight.degra.lv

block-invalid-master-merge:
  stage: test
  image: alpine
  script:
    - |
      echo "Target branch: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
      echo "Source branch: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
      if [ "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" = "master" ] && [ "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME" != "test" ]; then
        echo "❌ Merge to master only from 'test'!"
        exit 1
      fi
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always

prevent-illegal-master-push:
  stage: test
  image: alpine
  script:
    - |
      echo "🚨 A direct push to master was detected!"
      echo "Last committer: $(git log -1 --pretty=format:'%an')"
      echo "If this merge was not made from the 'test' branch, it should be reviewed manually."
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "push"'
      when: always
