stages:
  - test
  - build
  - deploy-test
  - deploy-prod

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"

# Kopējie iestatījumi Maven būvēšanai
.maven-setup: &maven-setup
  image: maven:3.9.5-eclipse-temurin-21
  cache:
    key: maven
    paths:
      - .m2/repository

# Kopējais Maven build templates
.maven-build-template: &maven-build
  <<: *maven-setup
  stage: build
  script:
    - mvn clean package -pl $MODULE -am -DskipTests
  artifacts:
    paths:
      - $MODULE/target/*.jar
      - core/target/*.jar
  dependencies:
    - core-build
  needs:
    - core-build
  only:
    - test
    - master

# Kopējais Docker build templates (izmanto Kaniko)
.docker-build-template: &docker-build
  stage: build
  image: gcr.io/kaniko-project/executor:latest
  needs:
    - $MODULE-maven-build
  script:
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $MODULE/Dockerfile --destination $CI_REGISTRY_IMAGE/$MODULE:$CI_COMMIT_REF_SLUG
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "test" ]]; then
        docker tag $CI_REGISTRY_IMAGE/$MODULE:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE/$MODULE:test
        docker push $CI_REGISTRY_IMAGE/$MODULE:test
      fi
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "master" ]]; then
        docker tag $CI_REGISTRY_IMAGE/$MODULE:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE/$MODULE:latest
        docker push $CI_REGISTRY_IMAGE/$MODULE:latest
      fi
  only:
    - test
    - master

# Kopējais SSH deploy templates
.deploy-template: &deploy
  stage: $STAGE
  image: alpine:latest
  needs:
    - job: $MODULE-docker-build
      optional: true
  script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - |
      ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER "
        mkdir -p /home/dockeruser/degra/$ENV/$MODULE &&
        cd /home/dockeruser/degra/$ENV/$MODULE &&
        echo \"$ENV_VARS\" > .env &&
        cat > docker-compose.yml << 'EOL'
        version: '3'
        services:
          $MODULE:
            image: $CI_REGISTRY_IMAGE/$MODULE:$TAG
            environment:
              - SPRING_DATASOURCE_URL=\${SPRING_DATASOURCE_URL}
              - SPRING_DATASOURCE_USERNAME=\${POSTGRES_USER}
              - SPRING_DATASOURCE_PASSWORD=\${POSTGRES_PASSWORD}
              - SPRING_JPA_HIBERNATE_DDL_AUTO=update
              - KEYCLOAK_AUTH_SERVER_URL=\${KEYCLOAK_AUTH_SERVER_URL}
              - KEYCLOAK_REALM=\${KEYCLOAK_REALM}
              - KEYCLOAK_RESOURCE=\${KEYCLOAK_RESOURCE}
              - KEYCLOAK_USE_RESOURCE_ROLE_MAPPINGS=true
              - SPRING_PROFILES_ACTIVE=\${SPRING_PROFILES_ACTIVE}
              - APP_SECURITY_ALLOWED_ORIGINS=\${APP_SECURITY_ALLOWED_ORIGINS}
            ports:
              - \"\${APP_PORT}:$PORT\"
            volumes:
              - ./logs:/logs
            restart: unless-stopped
      EOL
      "
      - |
      ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER "
        cd /home/dockeruser/degra/$ENV/$MODULE &&
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
        docker-compose pull &&
        docker-compose up -d
      "
  dependencies:
    - $MODULE-docker-build
  environment:
    name: "$ENV-$MODULE"
    url: "https://$ENV.degra.lv/$MODULE"

# ✅ Qodana koda kvalitātes pārbaude
qodana:
  stage: test
  image:
    name: jetbrains/qodana-jvm
    entrypoint: [""]
  variables:
    QODANA_TOKEN: $qodana_token
  script:
    - qodana --save-report --results-dir=$CI_PROJECT_DIR/.qodana
  only:
    - master
    - main
    - merge_requests
  when: manual

# ✅ SonarCloud analīze
sonarcloud-check:
  stage: test
  <<: *maven-setup
  script:
    - mvn verify sonar:sonar -Dsonar.projectKey=kaspars.batrags_degra -Djavafx.version=17
  only:
    - merge_requests
    - master
    - main
    - develop
  when: manual

core-build:
  <<: *maven-setup
  stage: build
  script:
    - mvn clean install -pl core -am -DskipTests -Dsonar.skip=true
  artifacts:
    paths:
      - core/target/*.jar
  only:
    - branches
    - test
    - master

# ✅ Testēšanas darbi
usermanager-test:
  <<: *maven-setup
  stage: test
  script:
    - mvn clean test -pl usermanager -am
  artifacts:
    reports:
      junit: usermanager/target/surefire-reports/TEST-*.xml

company-test:
  <<: *maven-setup
  stage: test
  script:
    - mvn clean test -pl company -am
  artifacts:
    reports:
      junit: company/target/surefire-reports/TEST-*.xml

# ✅ Būvēšana
usermanager-maven-build:
  <<: *maven-build
  variables:
    MODULE: "usermanager"
  dependencies:
    - core-build
  needs:
    - core-build

company-maven-build:
  <<: *maven-build
  variables:
    MODULE: "company"
  dependencies:
    - core-build
  needs:
    - core-build

usermanager-docker-build:
  <<: *docker-build
  variables:
    MODULE: "usermanager"
  needs:
    - usermanager-maven-build
  dependencies:
    - usermanager-maven-build

company-docker-build:
  <<: *docker-build
  variables:
    MODULE: "company"
  needs:
    - company-maven-build
  dependencies:
    - company-maven-build

# ✅ Izvietošana testā
usermanager-deploy-test:
  <<: *deploy
  variables:
    MODULE: "usermanager"
    ENV: "test"
    SERVER: "$TEST_SERVER"
    SERVER_USER: "$TEST_SERVER_USER"
    SSH_PRIVATE_KEY: "$TEST_SSH_PRIVATE_KEY"
    ENV_VARS: "$TEST_ENV_USERMANAGER"
    TAG: "$CI_COMMIT_REF_SLUG"
    STAGE: "deploy-test"
    PORT: "8080"
  rules:
    - if: '$CI_COMMIT_BRANCH == "test"'
      when: always

company-deploy-test:
  <<: *deploy
  variables:
    MODULE: "company"
    ENV: "test"
    SERVER: "$TEST_SERVER"
    SERVER_USER: "$TEST_SERVER_USER"
    SSH_PRIVATE_KEY: "$TEST_SSH_PRIVATE_KEY"
    ENV_VARS: "$TEST_ENV_COMPANY"
    TAG: "$CI_COMMIT_REF_SLUG"
    STAGE: "deploy-test"
    PORT: "8085"
  rules:
    - if: '$CI_COMMIT_BRANCH == "test"'
      when: always

# ✅ Izvietošana produkcijā
usermanager-deploy-prod:
  <<: *deploy
  variables:
    MODULE: "usermanager"
    ENV: "prod"
    SERVER: "$PROD_SERVER"
    SERVER_USER: "$PROD_SERVER_USER"
    SSH_PRIVATE_KEY: "$PROD_SSH_PRIVATE_KEY"
    ENV_VARS: "$PROD_ENV_USERMANAGER"
    TAG: "latest"
    STAGE: "deploy-prod"
    PORT: "8080"
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: manual
