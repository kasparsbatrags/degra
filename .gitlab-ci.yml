stages:
  - test
  - build
  - deploy-test
  - deploy-prod

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"

services:
  - docker:20-dind

.maven-setup: &maven-setup
  image: maven:3.9.5-eclipse-temurin-21
  cache:
    paths:
      - .m2/repository

qodana:
  stage: test
  image:
    name: jetbrains/qodana-jvm
    entrypoint: [""]
  variables:
    QODANA_TOKEN: $qodana_token
  script:
    - qodana --save-report --results-dir=$CI_PROJECT_DIR/.qodana
  only:
    - master
    - main
    - merge_requests
  when: manual

usermanager-test:
  <<: *maven-setup
  stage: test
  script:
    - mvn clean test -pl usermanager -am
  artifacts:
    reports:
      junit: usermanager/target/surefire-reports/TEST-*.xml

company-test:
  <<: *maven-setup
  stage: test
  script:
    - mvn clean test -pl company -am
  artifacts:
    reports:
      junit: company/target/surefire-reports/TEST-*.xml

sonarcloud-check:
  stage: test
  image: maven:3.9.5-eclipse-temurin-21
  script:
    - mvn verify sonar:sonar -Dsonar.projectKey=kaspars.batrags_degra -Djavafx.version=17
  only:
    - merge_requests
    - master
    - main
    - develop
  when: manual

core-build:
  <<: *maven-setup
  stage: build
  script:
    - mvn clean install -pl core -am -DskipTests -Dsonar.skip=true
  artifacts:
    paths:
      - core/target/*.jar
  only:
    - branches
    - test
    - master

usermanager-maven-build:
  <<: *maven-setup
  stage: build
  script:
    - mvn clean package -pl usermanager -am -DskipTests
  artifacts:
    paths:
      - usermanager/target/*.jar
      - core/target/*.jar
  dependencies:
    - core-build
  needs:
    - usermanager-test
    - core-build
  only:
    - test
    - master

usermanager-docker-build:
  stage: build
  image: docker:20
  needs:
    - usermanager-maven-build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/usermanager:$CI_COMMIT_REF_SLUG -f usermanager/Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/usermanager:$CI_COMMIT_REF_SLUG
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "test" ]]; then
        docker tag $CI_REGISTRY_IMAGE/usermanager:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE/usermanager:test
        docker push $CI_REGISTRY_IMAGE/usermanager:test
      fi
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "master" ]]; then
        docker tag $CI_REGISTRY_IMAGE/usermanager:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE/usermanager:latest
        docker push $CI_REGISTRY_IMAGE/usermanager:latest
      fi
  only:
    - test
    - master

company-maven-build:
  <<: *maven-setup
  stage: build
  script:
    - mvn clean package -pl company -am -DskipTests
  artifacts:
    paths:
      - company/target/*.jar
      - core/target/*.jar
  dependencies:
    - company-test
    - core-build
  needs:
    - company-test
    - core-build
  only:
    - test
    - master

company-docker-build:
  stage: build
  image: docker:20
  needs:
    - company-maven-build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/company:$CI_COMMIT_REF_SLUG -f company/Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/company:$CI_COMMIT_REF_SLUG
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "test" ]]; then
        docker tag $CI_REGISTRY_IMAGE/company:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE/company:test
        docker push $CI_REGISTRY_IMAGE/company:test
      fi
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "master" ]]; then
        docker tag $CI_REGISTRY_IMAGE/company:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE/company:latest
        docker push $CI_REGISTRY_IMAGE/company:latest
      fi
  only:
    - test
    - master

.deploy-template: &deploy-template
  image: docker:20
  before_script:
    - apk add --no-cache openssh-client bash
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa

  script:
    # Set up environment variables
    - export SERVER_VAR_NAME="${ENVIRONMENT}_SERVER"
    - export USER_VAR_NAME="${ENVIRONMENT}_SERVER_USER"
    - export SERVER_VAR_NAME=$(echo $SERVER_VAR_NAME | tr "[:lower:]" "[:upper:]")
    - export USER_VAR_NAME=$(echo $USER_VAR_NAME | tr "[:lower:]" "[:upper:]")
    
    # Use eval for indirect variable expansion and export the variables
    - eval export SERVER=\$${SERVER_VAR_NAME}
    - eval export SERVER_USER=\$${USER_VAR_NAME}
    
    # Debug output
    - echo "ENVIRONMENT=$ENVIRONMENT"
    - echo "SERVER=$SERVER"
    - echo "SERVER_USER=$SERVER_USER"

    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER "mkdir -p /home/dockeruser/degra/$ENVIRONMENT/$SERVICE_NAME"
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER "cd /home/dockeruser/degra/$ENVIRONMENT/$SERVICE_NAME && echo \"$ENV_CONTENT\" > .env"

    - |
      ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER "
      cd /home/dockeruser/degra/$ENVIRONMENT/$SERVICE_NAME &&
      cat > docker-compose.yml << 'EOL'
      services:
        $SERVICE_NAME:
          image: $CI_REGISTRY_IMAGE/$SERVICE_NAME:$IMAGE_TAG
          environment:
            - SPRING_DATASOURCE_URL=\${SPRING_DATASOURCE_URL}
            - SPRING_DATASOURCE_USERNAME=\${POSTGRES_USER}
            - SPRING_DATASOURCE_PASSWORD=\${POSTGRES_PASSWORD}
            - SPRING_JPA_HIBERNATE_DDL_AUTO=update
            - KEYCLOAK_AUTH_SERVER_URL=\${KEYCLOAK_AUTH_SERVER_URL}
            - KEYCLOAK_REALM=\${KEYCLOAK_REALM}
            - KEYCLOAK_RESOURCE=\${KEYCLOAK_RESOURCE}
            - KEYCLOAK_USE_RESOURCE_ROLE_MAPPINGS=true
            - SPRING_PROFILES_ACTIVE=\${SPRING_PROFILES_ACTIVE}
            - APP_SECURITY_ALLOWED_ORIGINS=\${APP_SECURITY_ALLOWED_ORIGINS}
          ports:
            - \"\${APP_PORT}:8080\"
          volumes:
            - ./Logs:/app/Logs:Z
          restart: unless-stopped
      EOL
      "

    - |
      ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER "
      cd /home/dockeruser/degra/$ENVIRONMENT/$SERVICE_NAME &&
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
      docker-compose pull &&
      docker-compose up -d
      "

.deploy-test-template: &deploy-test-template
  <<: *deploy-template
  stage: deploy-test
  variables:
    ENVIRONMENT: "test"
    SSH_PRIVATE_KEY: $TEST_SSH_PRIVATE_KEY
    SERVER_USER: $TEST_SERVER_USER
    SERVER: $TEST_SERVER
    IMAGE_TAG: $CI_COMMIT_REF_SLUG
  rules:
    - if: '$CI_COMMIT_BRANCH == "test"'
      when: always
    - if: '$CI_COMMIT_BRANCH != "test" && $CI_COMMIT_BRANCH != "master"'
      when: never

usermanager-deploy-test:
  <<: *deploy-test-template
  needs:
    - job: usermanager-docker-build
      optional: true
  variables:
    SERVICE_NAME: "usermanager"
    ENV_CONTENT: $TEST_ENV_USERMANAGER
  dependencies:
    - usermanager-docker-build
  environment:
    name: test-usermanager
    url: https://test-usermanager.degra.lv

company-deploy-test:
  <<: *deploy-test-template
  needs:
    - job: company-docker-build
      optional: true
  variables:
    SERVICE_NAME: "company"
    ENV_CONTENT: $TEST_ENV_COMPANY
  dependencies:
    - company-docker-build
  environment:
    name: test-company
    url: https://test-company.degra.lv

.deploy-prod-template: &deploy-prod-template
  <<: *deploy-template
  stage: deploy-prod
  variables:
    ENVIRONMENT: "prod"
    SSH_PRIVATE_KEY: $PROD_SSH_PRIVATE_KEY
    SERVER_USER: $PROD_SERVER_USER
    SERVER: $PROD_SERVER
    IMAGE_TAG: "latest"
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: manual

usermanager-deploy-prod:
  <<: *deploy-prod-template
  needs:
    - job: usermanager-docker-build
      optional: true
  variables:
    SERVICE_NAME: "usermanager"
    ENV_CONTENT: $PROD_ENV_USERMANAGER
  dependencies:
    - usermanager-docker-build
  environment:
    name: production-usermanager
    url: https://usermanager.degra.lv

company-deploy-prod:
  <<: *deploy-prod-template
  needs:
    - job: company-docker-build
      optional: true
  variables:
    SERVICE_NAME: "company"
    ENV_CONTENT: $PROD_ENV_COMPANY
  dependencies:
    - company-docker-build
  environment:
    name: production-company
    url: https://company.degra.lv
